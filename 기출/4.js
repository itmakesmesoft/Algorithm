// 문제 4. 입력값에 민감 정보가 포함된 경우 마스킹 처리하고, 민감 정보가 아닌 경우 입력값을 그대로 반환
// 주어진 입력이 객체일 경우, 객체의 속성 중 민감 정보가 포함된 값이 있다면 해당 속성의 값을 마스킹된 값으로 변환해야 함

// 민감정보 규칙
// - 전화번호
//   하이픈으로 연결된 3자리-4자리-4자리, 3자리-3자리-4자리 또는 2자리-3자리-4자리, 2자리-4자리-4자리의 전화번호
//   객체 프로퍼티 이름이 amount가 포함된 문자열 값
//   e.g. ({amount: '1000'})
// - 이메일
//   영문 대소문자 또는 숫자, .이나 -으로 구성되고, @이 존재하며, 계정 이름과 도메인이 있고, 도메인에 .을 포함하는 문자열
//   e.g. example@domain.com

// 마스킹 규칙
// - 입력값의 길이가 3이하인 경우 1개의 문자를 *로 치환
//   - aa  =>  a*
//   - aaa =>  a*a
// - 입력값의 길이가 4~6인 경우, 2개의 문자를 중간에 *로 치환
//   - aaaa  => a**a
//   - 12345 => 12**5
//   - 가나라마바님 => 가나**바님
// - 입력값의 길이가 7이상인 경우 3개의 문자를 중간에 *로 치환
//   - abcdefg => ab***fg
// - 이메일은 @이전의 문자열 최대 3자리까지 중간을 *로 치환하고, @와 도메인 사이의 문자열을 최대 3자리까지 *로 치환
//   - aa@domain.com => a*@do**in.com
// - 이름은 님을 제외한 문자열을 입력값 길이에 따라 치환
//   - 김토스님 => 김*스님
// - 금액에 해당하는 경우 모든 숫자를 *로 치환
//   - 100원 => ***원
// - 카드 유효기간에 해당하는 경우 / 앞의 모든 숫자를 *로 치환
//   - 01/23 => **/23
// - 전화번호는 중간번호 뒤에서 두자리를 *로 치환
//   - 010-9876-5432 => 010-98**-5432

// 예시 입출력
// solution({ phone : 'aaaa'})           // {phone: 'a**a'}
// solution({ phone : '010-9876-5432'})  // {phone : '010-98**-5432'}
// solution('010-9876-5432')             // 010-98**-5432
// solution('김토스님')                   // 김*스님
// solution({expiry : '01/27'})          // **/27
// solution({value : '100원'})           // {value: '***원}
// solution('천조원')                    // 천조원
// solution('aa@domain.com')             // a*@do**in.com

function solution(props) {}
